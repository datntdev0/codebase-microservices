name: Code Quality Scanning

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:

  codeql-scan-frontend:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      packages: read
      actions: read
      contents: read
    defaults:
      run:
        working-directory: apps/datntdev.Microservices.Angular
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'

    - name: Install dependencies
      run: yarn install --frozen-lockfile
        
    - name: Initialize CodeQL for JavaScript/TypeScript (Angular)
      uses: github/codeql-action/init@v3
      with:
        languages: javascript, typescript
        build-mode: none

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  codeql-scan-backend:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      packages: read
      actions: read
      contents: read

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Install dependencies
      run: dotnet restore
        
    - name: Initialize CodeQL for C#
      uses: github/codeql-action/init@v3
      with:
        languages: csharp
        build-mode: autobuild

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  sonar-scan-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: |
            apps/datntdev.Microservices.Angular/node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('apps/datntdev.Microservices.Angular/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
      - name: Install dependencies
        working-directory: apps/datntdev.Microservices.Angular
        run: yarn install --frozen-lockfile
      - name: Run unit tests
        working-directory: apps/datntdev.Microservices.Angular
        run: yarn ng test --code-coverage --watch=false --browsers=ChromeHeadless
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_FRONTEND }}
        with:
          projectBaseDir: apps/datntdev.Microservices.Angular
  

  sonar-scan-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'microsoft'

      - name: Cache SonarQube Cloud packages
        uses: actions/cache@v4
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarQube Cloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
      - name: Trust ASP.NET Core HTTPS development certificate
        run: dotnet dev-certs https --trust
      - name: Remove Angular project and restore nuget packages
        run: |
          rm -rf apps/datntdev.Microservices.Angular
          dotnet restore
      - name: Install SonarQube Cloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        run: |
          mkdir -p ./.sonar/scanner
          dotnet tool update dotnet-sonarscanner --tool-path /home/runner/.sonar/scanner
          dotnet tool install --global dotnet-coverage

      - name: Run SonarQube Cloud analysis
        run: |
          /home/runner/.sonar/scanner/dotnet-sonarscanner begin \
            /k:"datntdev0_codebase-microservices-backend" \
            /o:"${{ vars.SONAR_ORG }}" \
            /d:sonar.token="${{ secrets.SONAR_TOKEN_BACKEND }}" \
            /d:sonar.cs.vscoveragexml.reportsPaths=coverage.xml
          dotnet build --configuration Release
          dotnet-coverage collect "dotnet test --no-build --configuration Release" -f xml -o "coverage.xml"
          /home/runner/.sonar/scanner/dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN_BACKEND }}"